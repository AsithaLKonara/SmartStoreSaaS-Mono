generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                   String                 @id @default(cuid())
  email                                String                 @unique
  name                                 String?
  password                             String?
  image                                String?
  role                                 String                 @default("STAFF")
  isActive                             Boolean                @default(true)
  emailVerified                        DateTime?
  stripeCustomerId                     String?
  mfaEnabled                           Boolean                @default(false)
  mfaSecret                            String?
  mfaBackupCodes                       String[]
  deletedAt                            DateTime?
  createdAt                            DateTime               @default(now())
  updatedAt                            DateTime               @updatedAt
  organizationId                       String?
  billing_cycles                       billing_cycles[]
  business_profiles                    business_profiles?
  courier_api_configs                  courier_api_configs[]
  orders_orders_createdByIdTousers     Order[]                @relation("orders_createdByIdTousers")
  orders_orders_updatedByIdTousers     Order[]                @relation("orders_updatedByIdTousers")
  products_products_createdByIdTousers Product[]              @relation("products_createdByIdTousers")
  products_products_updatedByIdTousers Product[]              @relation("products_updatedByIdTousers")
  purchase_orders                      purchase_orders[]
  reports                              Report[]
  user_feature_access                  user_feature_access[]
  user_payment_methods                 user_payment_methods[]
  user_subscriptions                   user_subscriptions[]
  organization                         Organization?          @relation(fields: [organizationId], references: [id])

  @@map("users")
}

model Organization {
  id                      String                   @id @default(cuid())
  name                    String
  domain                  String?                  @unique
  plan                    String                   @default("FREE")
  status                  String                   @default("ACTIVE")
  settings                Json                     @default("{}")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  analytics               Analytics[]
  campaigns               Campaign[]
  categories              Category[]
  couriers                Courier[]
  customerLoyalty         CustomerLoyalty[]
  customers               Customer[]
  deliveries              Delivery[]
  inventoryMovements      InventoryMovement[]
  orders                  Order[]
  payments                Payment[]
  products                Product[]
  purchase_orders         purchase_orders[]
  reports                 Report[]
  users                   User[]
  warehouses              Warehouse[]
  whatsappIntegrations    WhatsAppIntegration[]
  woocommerceIntegrations WooCommerceIntegration[]

  @@map("organizations")
}

model Customer {
  id             String           @id @default(cuid())
  email          String
  name           String
  phone          String?
  address        Json?
  organizationId String
  status         String           @default("ACTIVE")
  totalOrders    Int              @default(0)
  totalSpent     Float            @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  analytics      Analytics[]
  loyalty        CustomerLoyalty?
  organization   Organization     @relation(fields: [organizationId], references: [id])
  deliveries     Delivery[]
  orders         Order[]
  payments       Payment[]

  @@map("customers")
}

model Product {
  id                                String              @id @default(cuid())
  name                              String
  description                       String?
  sku                               String?             @unique
  price                             Float
  comparePrice                      Float?
  cost                              Float?
  organizationId                    String
  categoryId                        String?
  createdById                       String
  updatedById                       String?
  status                            String              @default("ACTIVE")
  inventoryQuantity                 Int                 @default(0)
  weight                            Float?
  dimensions                        Json?
  tags                              String[]
  isVariant                         Boolean             @default(false)
  parentProductId                   String?
  variantGroup                      String?
  createdAt                         DateTime            @default(now())
  updatedAt                         DateTime            @updatedAt
  analytics                         Analytics[]
  inventoryMovements                InventoryMovement[]
  orderItems                        OrderItem[]
  product_media                     product_media[]
  variants                          ProductVariant[]
  category                          Category?           @relation(fields: [categoryId], references: [id])
  users_products_createdByIdTousers User                @relation("products_createdByIdTousers", fields: [createdById], references: [id])
  organization                      Organization        @relation(fields: [organizationId], references: [id])
  products                          Product?            @relation("productsToproducts", fields: [parentProductId], references: [id])
  other_products                    Product[]           @relation("productsToproducts")
  users_products_updatedByIdTousers User?               @relation("products_updatedByIdTousers", fields: [updatedById], references: [id])

  @@map("products")
}

model Category {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  parentId       String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  products       Product[]

  @@map("categories")
}

model Order {
  id                              String               @id @default(cuid())
  orderNumber                     String               @unique
  status                          String               @default("PENDING")
  total                           Float
  subtotal                        Float
  tax                             Float                @default(0)
  shipping                        Float                @default(0)
  discount                        Float                @default(0)
  organizationId                  String
  customerId                      String
  createdById                     String
  updatedById                     String?
  paymentStatus                   String               @default("PENDING")
  shippingStatus                  String               @default("PENDING")
  notes                           String?
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @updatedAt
  analytics                       Analytics[]
  deliveries                      Delivery[]
  inventory_movements             InventoryMovement[]
  orderItems                      OrderItem[]
  statusHistory                   OrderStatusHistory[]
  users_orders_createdByIdTousers User                 @relation("orders_createdByIdTousers", fields: [createdById], references: [id])
  customer                        Customer             @relation(fields: [customerId], references: [id])
  organization                    Organization         @relation(fields: [organizationId], references: [id])
  users_orders_updatedByIdTousers User?                @relation("orders_updatedByIdTousers", fields: [updatedById], references: [id])
  payments                        Payment[]
  shipping_labels                 shipping_labels[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  total     Float
  orderId   String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id             String       @id @default(cuid())
  amount         Float
  currency       String       @default("USD")
  status         String       @default("PENDING")
  method         String
  organizationId String
  orderId        String?
  customerId     String?
  transactionId  String?      @unique
  gateway        String?
  metadata       Json         @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  customers      Customer?    @relation(fields: [customerId], references: [id])
  order          Order?       @relation(fields: [orderId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("payments")
}

model Delivery {
  id                String       @id @default(cuid())
  trackingNumber    String       @unique
  status            String       @default("PENDING")
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  organizationId    String
  orderId           String?
  courierId         String?
  customerId        String?
  address           Json?
  notes             String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  courier           Courier?     @relation(fields: [courierId], references: [id])
  customers         Customer?    @relation(fields: [customerId], references: [id])
  order             Order?       @relation(fields: [orderId], references: [id])
  organization      Organization @relation(fields: [organizationId], references: [id])

  @@map("deliveries")
}

model Courier {
  id              String       @id @default(cuid())
  name            String
  email           String?
  phone           String?
  vehicleType     String?
  vehicleNumber   String?
  organizationId  String
  status          String       @default("ACTIVE")
  isActive        Boolean      @default(true)
  rating          Float?
  totalDeliveries Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id])
  deliveries      Delivery[]

  @@map("couriers")
}

model ProductVariant {
  id                String   @id @default(cuid())
  productId         String
  name              String
  value             String
  sku               String?  @unique
  price             Float?
  comparePrice      Float?
  cost              Float?
  inventoryQuantity Int      @default(0)
  weight            Float?
  dimensions        Json?
  isActive          Boolean  @default(true)
  sortOrder         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  product           Product  @relation(fields: [productId], references: [id])

  @@map("product_variants")
}

model InventoryMovement {
  id             String       @id @default(cuid())
  type           String
  quantity       Int
  reason         String?
  organizationId String
  productId      String?
  orderId        String?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  orders         Order?       @relation(fields: [orderId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  product        Product?     @relation(fields: [productId], references: [id])

  @@map("inventory_movements")
}

model OrderStatusHistory {
  id        String   @id @default(cuid())
  orderId   String
  status    String
  newStatus String
  reason    String?
  notes     String?
  changedBy String
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])

  @@map("order_status_history")
}

model CustomerLoyalty {
  id             String       @id @default(cuid())
  customerId     String       @unique
  organizationId String
  points         Int          @default(0)
  tier           String       @default("BRONZE")
  totalSpent     Float        @default(0)
  totalOrders    Int          @default(0)
  lastOrderDate  DateTime?
  tierExpiryDate DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  customer       Customer     @relation(fields: [customerId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("customer_loyalty")
}

model Analytics {
  id             String       @id @default(cuid())
  type           String
  value          Int
  metadata       Json         @default("{}")
  organizationId String
  customerId     String?
  productId      String?
  orderId        String?
  timestamp      DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  customers      Customer?    @relation(fields: [customerId], references: [id])
  orders         Order?       @relation(fields: [orderId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  products       Product?     @relation(fields: [productId], references: [id])

  @@map("analytics")
}

model Report {
  id             String       @id @default(cuid())
  name           String
  type           String
  status         String       @default("DRAFT")
  organizationId String
  createdById    String?
  data           Json         @default("{}")
  schedule       String?
  lastGenerated  DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  users          User?        @relation(fields: [createdById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("reports")
}

model Warehouse {
  id             String       @id @default(cuid())
  name           String
  address        Json?
  organizationId String
  isActive       Boolean      @default(true)
  capacity       Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("warehouses")
}

model WooCommerceIntegration {
  id             String       @id @default(cuid())
  organizationId String
  siteUrl        String
  consumerKey    String
  consumerSecret String
  isActive       Boolean      @default(true)
  lastSync       DateTime?
  syncSettings   Json         @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("woocommerce_integrations")
}

model WhatsAppIntegration {
  id             String       @id @default(cuid())
  organizationId String
  phoneNumber    String
  accessToken    String
  isActive       Boolean      @default(true)
  webhookUrl     String?
  lastSync       DateTime?
  syncSettings   Json         @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("whatsapp_integrations")
}

model Campaign {
  id               String             @id @default(cuid())
  name             String
  description      String?
  type             String
  status           String             @default("DRAFT")
  organizationId   String
  startDate        DateTime?
  endDate          DateTime?
  budget           Float?
  targetAudience   String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  campaign_details campaign_details[]
  organization     Organization       @relation(fields: [organizationId], references: [id])

  @@map("campaigns")
}

model billing_cycles {
  id            String   @id
  userId        String
  packageId     String
  startDate     DateTime
  endDate       DateTime
  amount        Float
  status        String   @default("pending")
  paymentMethod String?
  transactionId String?
  createdAt     DateTime @default(now())
  packages      packages @relation(fields: [packageId], references: [id])
  users         User     @relation(fields: [userId], references: [id])
}

model business_profiles {
  id                 String   @id
  userId             String   @unique
  businessName       String
  businessType       String?
  industry           String?
  registrationNumber String?
  taxId              String?
  address            Json?
  logoUrl            String?
  website            String?
  description        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  users              User     @relation(fields: [userId], references: [id])
}

model campaign_details {
  id             String   @id
  campaignId     String
  type           String
  content        Json
  targetAudience Json
  schedule       Json
  metrics        Json
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  campaigns      Campaign @relation(fields: [campaignId], references: [id])
}

model courier_api_configs {
  id               String           @id
  userId           String
  courierServiceId String
  apiCredentials   Json
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  courier_services courier_services @relation(fields: [courierServiceId], references: [id])
  users            User             @relation(fields: [userId], references: [id])
}

model courier_services {
  id                  String                @id
  name                String
  code                String                @unique
  apiEndpoint         String?
  apiKey              String?
  webhookUrl          String?
  isActive            Boolean               @default(true)
  supportedFeatures   Json                  @default("{}")
  rateCalculation     Json?
  createdAt           DateTime              @default(now())
  courier_api_configs courier_api_configs[]
  shipping_labels     shipping_labels[]
}

model features {
  id                  String                @id
  key                 String                @unique
  name                String
  description         String?
  category            String?
  isCore              Boolean               @default(false)
  createdAt           DateTime              @default(now())
  user_feature_access user_feature_access[]
}

model package_features {
  id          String   @id
  packageId   String
  featureKey  String
  featureName String
  isEnabled   Boolean  @default(true)
  limits      Json?
  createdAt   DateTime @default(now())
  packages    packages @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

model packages {
  id                    String                  @id
  name                  String
  description           String?
  price                 Float
  billingCycle          String                  @default("monthly")
  trialDays             Int                     @default(0)
  maxUsers              Int?
  maxProducts           Int?
  maxOrders             Int?
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  billing_cycles        billing_cycles[]
  package_features      package_features[]
  registration_requests registration_requests[]
  user_subscriptions    user_subscriptions[]
}

model product_media {
  id        String   @id
  productId String
  type      String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime
  products  Product  @relation(fields: [productId], references: [id])
}

model purchase_orders {
  id               String       @id
  poNumber         String       @unique
  status           String       @default("DRAFT")
  total            Float
  organizationId   String
  supplierId       String?
  createdById      String
  notes            String?
  expectedDelivery DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime
  users            User         @relation(fields: [createdById], references: [id])
  organizations    Organization @relation(fields: [organizationId], references: [id])
}

model registration_requests {
  id           String    @id
  businessName String
  contactName  String
  email        String
  phone        String?
  businessType String?
  industry     String?
  packageId    String?
  status       String    @default("pending")
  adminNotes   String?
  approvedBy   String?
  approvedAt   DateTime?
  createdAt    DateTime  @default(now())
  packages     packages? @relation(fields: [packageId], references: [id])
}

model shipping_labels {
  id               String           @id
  orderId          String?
  courierServiceId String
  trackingNumber   String?
  labelUrl         String?
  labelData        Json?
  printedAt        DateTime?
  createdAt        DateTime         @default(now())
  courier_services courier_services @relation(fields: [courierServiceId], references: [id])
  orders           Order?           @relation(fields: [orderId], references: [id])
}

model user_feature_access {
  id         String    @id
  userId     String
  featureKey String
  isEnabled  Boolean   @default(true)
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  features   features  @relation(fields: [featureKey], references: [key])
  users      User      @relation(fields: [userId], references: [id])
}

model user_payment_methods {
  id             String   @id
  userId         String
  methodType     String
  provider       String?
  accountDetails Json?
  isDefault      Boolean  @default(false)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  users          User     @relation(fields: [userId], references: [id])
}

model user_subscriptions {
  id               String    @id
  userId           String
  packageId        String
  status           String    @default("trial")
  trialStartDate   DateTime?
  trialEndDate     DateTime?
  billingStartDate DateTime?
  billingEndDate   DateTime?
  autoRenew        Boolean   @default(true)
  paymentMethod    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  packages         packages  @relation(fields: [packageId], references: [id])
  users            User      @relation(fields: [userId], references: [id])
}
