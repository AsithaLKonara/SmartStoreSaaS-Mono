generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(cuid())
  email                 String          @unique
  name                  String?
  password              String?
  role                  UserRole        @default(TENANT_ADMIN)
  roleTag               String? // For STAFF: inventory_manager, sales_executive, finance_officer, etc.
  organizationId        String?
  isActive              Boolean         @default(true)
  emailVerified         DateTime?
  image                 String?
  phone                 String?
  mfaEnabled            Boolean         @default(false)
  mfaSecret             String?
  mfaBackupCodes        String?
  deletedAt             DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  reports               Report[]
  organization          Organization?   @relation(fields: [organizationId], references: [id])
  purchaseOrdersCreated PurchaseOrder[]
  returnsApproved       Return[]
  giftCardsIssued       GiftCard[]

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  STAFF
  CUSTOMER
}

model Organization {
  id                      String                   @id @default(cuid())
  name                    String
  domain                  String?                  @unique
  description             String?
  logo                    String?
  status                  String                   @default("ACTIVE")
  plan                    PlanType                 @default(FREE)
  settings                String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  subscription            Subscription?
  activities              activities[]
  ai_analytics            ai_analytics[]
  ai_conversations        ai_conversations[]
  analytics               Analytics[]
  channel_integrations    channel_integrations[]
  chart_of_accounts       chart_of_accounts[]
  couriers                Courier[]
  customer_segments       customer_segments[]
  customers               Customer[]
  deliveries              Delivery[]
  iot_devices             iot_devices[]
  journal_entries         journal_entries[]
  ledger                  ledger[]
  orders                  Order[]
  payments                Payment[]
  performance_metrics     performance_metrics[]
  products                Product[]
  reports                 Report[]
  sms_campaigns           sms_campaigns[]
  sms_logs                sms_logs[]
  sms_subscriptions       sms_subscriptions[]
  sms_templates           sms_templates[]
  social_commerce         social_commerce[]
  support_tickets         support_tickets[]
  tax_rates               tax_rates[]
  tax_transactions        tax_transactions[]
  users                   User[]
  warehouses              Warehouse[]
  whatsappIntegrations    WhatsAppIntegration?
  whatsapp_messages       whatsapp_messages[]
  woocommerceIntegrations WooCommerceIntegration[]
  suppliers               Supplier[]
  purchaseOrders          PurchaseOrder[]
  returns                 Return[]
  giftCards               GiftCard[]
  affiliates              Affiliate[]
  referrals               Referral[]

  @@map("organizations")
}

model Customer {
  id                         String                       @id @default(cuid())
  name                       String
  email                      String
  phone                      String?
  address                    String?
  organizationId             String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  loyalty                    CustomerLoyalty[]
  customer_segment_customers customer_segment_customers[]
  organization               Organization                 @relation(fields: [organizationId], references: [id])
  orders                     Order[]
  whatsapp_messages          whatsapp_messages[]
  wishlists                  wishlists[]
  returns                    Return[]
  referralsGiven             Referral[]                   @relation("Referrer")
  referralsReceived          Referral[]                   @relation("Referred")

  @@map("customers")
}

model Product {
  id                 String               @id @default(cuid())
  name               String
  description        String?
  sku                String               @unique
  price              Decimal
  cost               Decimal?
  stock              Int                  @default(0)
  minStock           Int                  @default(0)
  weight             Float?
  dimensions         String?
  tags               String?
  isVariant          Boolean              @default(false)
  parentProductId    String?
  organizationId     String
  categoryId         String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  inventoryMovements InventoryMovement[]
  orderItems         OrderItem[]
  product_activities product_activities[]
  variants           ProductVariant[]
  category           Category?            @relation(fields: [categoryId], references: [id])
  organization       Organization         @relation(fields: [organizationId], references: [id])
  social_products    social_products[]
  wishlist_items     wishlist_items[]
  purchaseOrderItems PurchaseOrderItem[]
  returnItems        ReturnItem[]

  @@map("products")
}

model Category {
  id               String     @id @default(cuid())
  name             String
  description      String?
  parentId         String?
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  categories       Category?  @relation("categoriesTocategories", fields: [parentId], references: [id])
  other_categories Category[] @relation("categoriesTocategories")
  products         Product[]

  @@map("categories")
}

model Order {
  id                   String                @id @default(cuid())
  orderNumber          String                @unique
  customerId           String
  organizationId       String
  status               String                @default("PENDING")
  total                Decimal
  subtotal             Decimal
  tax                  Decimal               @default(0)
  shipping             Decimal               @default(0)
  discount             Decimal               @default(0)
  notes                String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deliveries           Delivery[]
  orderItems           OrderItem[]
  statusHistory        OrderStatusHistory[]
  organization         Organization          @relation(fields: [organizationId], references: [id])
  customer             Customer              @relation(fields: [customerId], references: [id])
  payments             Payment[]
  returns              Return[]
  giftCardTransactions GiftCardTransaction[]
  affiliateCommissions AffiliateCommission[]

  @@map("orders")
}

model OrderItem {
  id               String          @id @default(cuid())
  orderId          String
  productId        String
  variantId        String?
  quantity         Int
  price            Decimal
  total            Decimal
  createdAt        DateTime        @default(now())
  product_variants ProductVariant? @relation(fields: [variantId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])
  order            Order           @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model Payment {
  id             String       @id @default(cuid())
  orderId        String
  organizationId String
  amount         Decimal
  currency       String       @default("LKR")
  method         String
  status         String       @default("PENDING")
  transactionId  String?
  gateway        String?
  metadata       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  order          Order        @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Delivery {
  id                      String                    @id @default(cuid())
  orderId                 String
  organizationId          String
  courierId               String?
  status                  String                    @default("PENDING")
  trackingNumber          String?
  estimatedDelivery       DateTime?
  actualDelivery          DateTime?
  customerId              String?
  address                 String?
  notes                   String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  courier                 Courier?                  @relation(fields: [courierId], references: [id])
  organization            Organization              @relation(fields: [organizationId], references: [id])
  order                   Order                     @relation(fields: [orderId], references: [id])
  delivery_status_history delivery_status_history[]

  @@map("deliveries")
}

model Courier {
  id             String       @id @default(cuid())
  name           String
  phone          String?
  email          String?
  organizationId String
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  deliveries     Delivery[]

  @@map("couriers")
}

model ProductVariant {
  id                  String              @id @default(cuid())
  name                String
  sku                 String              @unique
  price               Decimal
  cost                Decimal?
  stock               Int                 @default(0)
  weight              Float?
  dimensions          String?
  isActive            Boolean             @default(true)
  productId           String
  organizationId      String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  inventory_movements InventoryMovement[]
  order_items         OrderItem[]
  product             Product             @relation(fields: [productId], references: [id])

  @@map("product_variants")
}

model InventoryMovement {
  id               String          @id @default(cuid())
  productId        String
  variantId        String?
  type             String
  quantity         Int
  reason           String?
  reference        String?
  createdAt        DateTime        @default(now())
  product_variants ProductVariant? @relation(fields: [variantId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])

  @@map("inventory_movements")
}

model OrderStatusHistory {
  id        String   @id @default(cuid())
  orderId   String
  status    String
  notes     String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])

  @@map("order_status_history")
}

model CustomerLoyalty {
  id                   String                 @id @default(cuid())
  customerId           String
  points               Int                    @default(0)
  tier                 String                 @default("BRONZE")
  totalSpent           Decimal                @default(0)
  lastActivity         DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  customer             Customer               @relation(fields: [customerId], references: [id])
  loyalty_transactions loyalty_transactions[]

  @@map("customer_loyalty")
}

model Analytics {
  id             String       @id @default(cuid())
  type           String
  value          Int
  metadata       String?
  organizationId String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("analytics")
}

model Report {
  id             String       @id @default(cuid())
  name           String
  type           String
  data           String?
  schedule       String?
  organizationId String
  createdById    String?
  createdAt      DateTime     @default(now())
  users          User?        @relation(fields: [createdById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("reports")
}

model Warehouse {
  id                  String                @id @default(cuid())
  name                String
  address             String?
  organizationId      String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  iot_devices         iot_devices[]
  warehouse_inventory warehouse_inventory[]
  organization        Organization          @relation(fields: [organizationId], references: [id])

  @@map("warehouses")
}

model WooCommerceIntegration {
  id             String       @id @default(cuid())
  organizationId String
  storeUrl       String
  consumerKey    String
  consumerSecret String
  isActive       Boolean      @default(true)
  lastSync       DateTime?
  syncSettings   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("woocommerce_integrations")
}

model WhatsAppIntegration {
  id             String       @id @default(cuid())
  organizationId String       @unique
  phoneNumber    String
  accessToken    String
  isActive       Boolean      @default(true)
  lastSync       DateTime?
  syncSettings   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("whatsapp_integrations")
}

model activities {
  id             String       @id
  type           String
  description    String
  userId         String?
  organizationId String
  metadata       String?
  createdAt      DateTime     @default(now())
  organizations  Organization @relation(fields: [organizationId], references: [id])
}

model ai_analytics {
  id             String       @id
  organizationId String
  query          String
  insights       String
  dataContext    String?
  filters        String?
  createdAt      DateTime     @default(now())
  organizations  Organization @relation(fields: [organizationId], references: [id])
}

model ai_conversations {
  id             String       @id
  organizationId String
  messages       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organizations  Organization @relation(fields: [organizationId], references: [id])
}

model channel_integrations {
  id               String             @id
  name             String
  type             String
  provider         String
  channel          String
  status           String             @default("INACTIVE")
  credentials      String?
  settings         String?
  webhookUrl       String?
  isActive         Boolean            @default(true)
  metadata         String?
  organizationId   String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  organizations    Organization       @relation(fields: [organizationId], references: [id])
  integration_logs integration_logs[]
}

model chart_of_accounts {
  id                      String                @id
  organizationId          String
  code                    String
  name                    String
  description             String?
  accountType             String
  accountSubType          String
  parentId                String?
  isActive                Boolean               @default(true)
  balance                 Float                 @default(0)
  currency                String                @default("USD")
  taxEnabled              Boolean               @default(false)
  taxRateId               String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime
  tax_rates               tax_rates?            @relation(fields: [taxRateId], references: [id])
  chart_of_accounts       chart_of_accounts?    @relation("chart_of_accountsTochart_of_accounts", fields: [parentId], references: [id])
  other_chart_of_accounts chart_of_accounts[]   @relation("chart_of_accountsTochart_of_accounts")
  organizations           Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  journal_entry_lines     journal_entry_lines[]
  ledger                  ledger[]

  @@unique([organizationId, code])
  @@index([parentId])
  @@index([organizationId])
  @@index([accountType])
}

model customer_segment_customers {
  id                String            @id
  segmentId         String
  customerId        String
  createdAt         DateTime          @default(now())
  customer_segments customer_segments @relation(fields: [segmentId], references: [id])
  customers         Customer          @relation(fields: [customerId], references: [id])
}

model customer_segments {
  id                         String                       @id
  name                       String
  description                String?
  criteria                   String?
  organizationId             String
  isActive                   Boolean                      @default(true)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime
  customer_segment_customers customer_segment_customers[]
  organizations              Organization                 @relation(fields: [organizationId], references: [id])
  sms_campaign_segments      sms_campaign_segments[]
}

model delivery_status_history {
  id         String   @id
  deliveryId String
  status     String
  notes      String?
  createdAt  DateTime @default(now())
  deliveries Delivery @relation(fields: [deliveryId], references: [id])
}

model integration_logs {
  id                   String               @id
  integrationId        String
  level                String
  message              String
  data                 String?
  timestamp            DateTime             @default(now())
  channel_integrations channel_integrations @relation(fields: [integrationId], references: [id])
}

model iot_alerts {
  id          String      @id
  deviceId    String
  type        String
  severity    String
  message     String
  data        String?
  isResolved  Boolean     @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime    @default(now())
  iot_devices iot_devices @relation(fields: [deviceId], references: [id])
}

model iot_devices {
  id              String            @id
  name            String
  type            String
  location        String
  warehouseId     String?
  storeId         String?
  macAddress      String
  ipAddress       String?
  firmwareVersion String
  batteryLevel    Int?
  status          String            @default("offline")
  lastSeen        DateTime?
  configuration   String?
  metadata        String?
  isActive        Boolean           @default(true)
  organizationId  String
  installedAt     DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  iot_alerts      iot_alerts[]
  warehouses      Warehouse?        @relation(fields: [warehouseId], references: [id])
  organizations   Organization      @relation(fields: [organizationId], references: [id])
  sensor_readings sensor_readings[]
}

model journal_entries {
  id                    String                @id
  organizationId        String
  entryNumber           String
  entryDate             DateTime
  description           String
  reference             String?
  status                String                @default("DRAFT")
  postedAt              DateTime?
  postedBy              String?
  reversedAt            DateTime?
  reversedBy            String?
  reversalOfId          String?
  attachments           String?
  notes                 String?
  createdBy             String
  createdAt             DateTime              @default(now())
  updatedAt             DateTime
  journal_entries       journal_entries?      @relation("journal_entriesTojournal_entries", fields: [reversalOfId], references: [id])
  other_journal_entries journal_entries[]     @relation("journal_entriesTojournal_entries")
  organizations         Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  journal_entry_lines   journal_entry_lines[]

  @@unique([organizationId, entryNumber])
  @@index([status])
  @@index([organizationId])
  @@index([entryDate])
}

model journal_entry_lines {
  id                String            @id
  journalEntryId    String
  accountId         String
  description       String?
  debit             Float             @default(0)
  credit            Float             @default(0)
  lineNumber        Int
  createdAt         DateTime          @default(now())
  journal_entries   journal_entries   @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  chart_of_accounts chart_of_accounts @relation(fields: [accountId], references: [id])

  @@index([journalEntryId])
  @@index([accountId])
}

model ledger {
  id                String            @id
  organizationId    String
  accountId         String
  transactionDate   DateTime
  description       String
  reference         String?
  referenceType     String?
  referenceId       String?
  debit             Float             @default(0)
  credit            Float             @default(0)
  balance           Float
  createdAt         DateTime          @default(now())
  organizations     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  chart_of_accounts chart_of_accounts @relation(fields: [accountId], references: [id])

  @@index([transactionDate])
  @@index([referenceType, referenceId])
  @@index([organizationId])
  @@index([accountId])
}

model loyalty_transactions {
  id               String          @id
  customerId       String
  loyaltyId        String
  type             String
  points           Int
  description      String?
  createdAt        DateTime        @default(now())
  customer_loyalty CustomerLoyalty @relation(fields: [loyaltyId], references: [id])
}

model performance_metrics {
  id             String       @id
  organizationId String
  endpoint       String
  method         String
  responseTime   Float
  statusCode     Int          @default(200)
  errorMessage   String?
  metadata       String?
  createdAt      DateTime     @default(now())
  organizations  Organization @relation(fields: [organizationId], references: [id])
}

model product_activities {
  id          String   @id
  productId   String
  type        String
  description String
  metadata    String?
  createdAt   DateTime @default(now())
  products    Product  @relation(fields: [productId], references: [id])
}

model sensor_readings {
  id          String      @id
  deviceId    String
  type        String
  value       Float
  unit        String
  location    String
  metadata    String?
  timestamp   DateTime    @default(now())
  iot_devices iot_devices @relation(fields: [deviceId], references: [id])
}

model sms_campaign_segments {
  id                String            @id
  campaignId        String
  customerSegmentId String
  createdAt         DateTime          @default(now())
  customer_segments customer_segments @relation(fields: [customerSegmentId], references: [id])
  sms_campaigns     sms_campaigns     @relation(fields: [campaignId], references: [id])
}

model sms_campaigns {
  id                    String                  @id
  name                  String
  templateId            String
  status                String                  @default("draft")
  scheduledAt           DateTime?
  startedAt             DateTime?
  completedAt           DateTime?
  organizationId        String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  sms_campaign_segments sms_campaign_segments[]
  sms_templates         sms_templates           @relation(fields: [templateId], references: [id])
  organizations         Organization            @relation(fields: [organizationId], references: [id])
}

model sms_logs {
  id             String       @id
  phone          String
  message        String
  status         String       @default("pending")
  provider       String       @default("twilio")
  messageId      String?
  organizationId String
  sentAt         DateTime?
  deliveredAt    DateTime?
  clicked        Boolean      @default(false)
  clickedAt      DateTime?
  createdAt      DateTime     @default(now())
  organizations  Organization @relation(fields: [organizationId], references: [id])
}

model sms_subscriptions {
  id             String       @id
  phone          String
  listId         String
  customFields   String?
  isActive       Boolean      @default(true)
  organizationId String
  subscribedAt   DateTime     @default(now())
  unsubscribedAt DateTime?
  organizations  Organization @relation(fields: [organizationId], references: [id])
}

model sms_templates {
  id             String          @id
  name           String
  content        String
  variables      String?
  organizationId String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  sms_campaigns  sms_campaigns[]
  organizations  Organization    @relation(fields: [organizationId], references: [id])
}

model social_commerce {
  id              String            @id
  platform        String
  organizationId  String
  accessToken     String?
  refreshToken    String?
  expiresAt       DateTime?
  isActive        Boolean           @default(true)
  lastSync        DateTime?
  settings        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  organizations   Organization      @relation(fields: [organizationId], references: [id])
  social_posts    social_posts[]
  social_products social_products[]
}

model social_posts {
  id               String           @id
  organizationId   String
  socialCommerceId String?
  content          String
  mediaUrls        String?
  hashtags         String?
  platform         String
  status           String           @default("DRAFT")
  scheduledAt      DateTime?
  publishedAt      DateTime?
  externalId       String?
  engagement       String?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  social_commerce  social_commerce? @relation(fields: [socialCommerceId], references: [id])
}

model social_products {
  id                String          @id
  socialCommerceId  String
  productId         String
  platformProductId String
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  products          Product         @relation(fields: [productId], references: [id])
  social_commerce   social_commerce @relation(fields: [socialCommerceId], references: [id])
}

model support_tickets {
  id             String       @id
  title          String
  description    String
  priority       String       @default("medium")
  status         String       @default("open")
  phone          String?
  email          String?
  organizationId String
  assignedTo     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organizations  Organization @relation(fields: [organizationId], references: [id])
}

model tax_rates {
  id                String              @id
  organizationId    String
  name              String
  code              String
  rate              Float
  jurisdiction      String?
  taxType           String
  isActive          Boolean             @default(true)
  effectiveFrom     DateTime            @default(now())
  effectiveTo       DateTime?
  isCompound        Boolean             @default(false)
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  chart_of_accounts chart_of_accounts[]
  organizations     Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tax_transactions  tax_transactions[]

  @@unique([organizationId, code])
  @@index([organizationId])
  @@index([isActive])
}

model tax_transactions {
  id              String       @id
  organizationId  String
  taxRateId       String
  transactionDate DateTime
  transactionType String
  baseAmount      Float
  taxAmount       Float
  totalAmount     Float
  reference       String?
  referenceType   String?
  referenceId     String?
  description     String?
  createdAt       DateTime     @default(now())
  tax_rates       tax_rates    @relation(fields: [taxRateId], references: [id])
  organizations   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([transactionDate])
  @@index([taxRateId])
  @@index([referenceType, referenceId])
  @@index([organizationId])
}

model warehouse_inventory {
  id               String    @id
  warehouseId      String
  productId        String
  variantId        String?
  quantity         Int       @default(0)
  reservedQuantity Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  warehouses       Warehouse @relation(fields: [warehouseId], references: [id])
}

model whatsapp_messages {
  id             String       @id
  organizationId String
  customerId     String?
  phoneNumber    String
  message        String
  type           String       @default("text")
  mediaUrl       String?
  status         String       @default("PENDING")
  direction      String       @default("OUTBOUND")
  externalId     String?
  isAutoReply    Boolean      @default(false)
  receivedAt     DateTime?
  sentAt         DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  customers      Customer?    @relation(fields: [customerId], references: [id])
  organizations  Organization @relation(fields: [organizationId], references: [id])
}

model wishlist_items {
  id         String    @id
  wishlistId String
  productId  String
  quantity   Int       @default(1)
  createdAt  DateTime  @default(now())
  products   Product   @relation(fields: [productId], references: [id])
  wishlists  wishlists @relation(fields: [wishlistId], references: [id])
}

model wishlists {
  id             String           @id
  customerId     String
  name           String           @default("My Wishlist")
  isPublic       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  wishlist_items wishlist_items[]
  customers      Customer         @relation(fields: [customerId], references: [id])
}

model Subscription {
  id                   String             @id @default(cuid())
  organizationId       String             @unique
  plan                 PlanType           @default(FREE)
  status               SubscriptionStatus @default(TRIAL)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  currentPeriodStart   DateTime           @default(now())
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  trialEndsAt          DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  organization         Organization       @relation(fields: [organizationId], references: [id])

  @@map("subscriptions")
}

enum PlanType {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELLED
  EXPIRED
}

// ============================================================================
// PROCUREMENT MODELS (v1.2)
// ============================================================================

model Supplier {
  id             String         @id @default(cuid())
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  code           String
  name           String
  contactName    String?
  email          String?
  phone          String?
  address        Json?
  paymentTerms   String?
  currency       String         @default("LKR")
  taxId          String?
  status         SupplierStatus @default(ACTIVE)
  rating         Float?
  totalOrders    Int            @default(0)
  totalSpent     Decimal        @default(0)
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  purchaseOrders PurchaseOrder[]

  @@unique([organizationId, code])
  @@map("suppliers")
}

model PurchaseOrder {
  id             String              @id @default(cuid())
  orderNumber    String              @unique
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  supplierId     String
  supplier       Supplier            @relation(fields: [supplierId], references: [id])
  status         PurchaseOrderStatus @default(DRAFT)
  orderDate      DateTime            @default(now())
  expectedDate   DateTime?
  receivedDate   DateTime?
  subtotal       Decimal
  tax            Decimal             @default(0)
  shipping       Decimal             @default(0)
  total          Decimal
  currency       String              @default("LKR")
  notes          String?
  createdById    String
  createdBy      User                @relation(fields: [createdById], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  items PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  productId        String
  product          Product       @relation(fields: [productId], references: [id])
  quantity         Int
  receivedQuantity Int           @default(0)
  unitPrice        Decimal
  tax              Decimal       @default(0)
  total            Decimal
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("purchase_order_items")
}

// ============================================================================
// RETURNS & REFUNDS MODELS (v1.4)
// ============================================================================

model Return {
  id             String        @id @default(cuid())
  returnNumber   String        @unique
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  orderId        String
  order          Order         @relation(fields: [orderId], references: [id])
  customerId     String
  customer       Customer      @relation(fields: [customerId], references: [id])
  reason         String
  status         ReturnStatus  @default(PENDING)
  refundMethod   RefundMethod?
  refundAmount   Decimal?
  restockFee     Decimal       @default(0)
  notes          String?
  approvedAt     DateTime?
  approvedById   String?
  approvedBy     User?         @relation(fields: [approvedById], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  items ReturnItem[]

  @@map("returns")
}

model ReturnItem {
  id           String   @id @default(cuid())
  returnId     String
  return       Return   @relation(fields: [returnId], references: [id], onDelete: Cascade)
  orderItemId  String?
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  quantity     Int
  reason       String?
  condition    String?
  refundAmount Decimal?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("return_items")
}

model GiftCard {
  id             String         @id @default(cuid())
  code           String         @unique
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  initialValue   Decimal
  currentValue   Decimal
  currency       String         @default("LKR")
  status         GiftCardStatus @default(ACTIVE)
  expiresAt      DateTime?
  issuedTo       String?
  issuedToEmail  String?
  issuedById     String?
  issuedBy       User?          @relation(fields: [issuedById], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  transactions GiftCardTransaction[]

  @@map("gift_cards")
}

model GiftCardTransaction {
  id         String                  @id @default(cuid())
  giftCardId String
  giftCard   GiftCard                @relation(fields: [giftCardId], references: [id], onDelete: Cascade)
  orderId    String?
  order      Order?                  @relation(fields: [orderId], references: [id])
  amount     Decimal
  type       GiftCardTransactionType
  balance    Decimal
  notes      String?
  createdAt  DateTime                @default(now())

  @@map("gift_card_transactions")
}

// ============================================================================
// AFFILIATE & REFERRAL MODELS (v1.5)
// ============================================================================

model Affiliate {
  id              String          @id @default(cuid())
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  code            String
  name            String
  email           String
  phone           String?
  commissionRate  Decimal         @default(10)
  status          AffiliateStatus @default(PENDING)
  totalSales      Decimal         @default(0)
  totalCommission Decimal         @default(0)
  paymentDetails  Json?
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  commissions AffiliateCommission[]
  referrals   Referral[]

  @@unique([organizationId, code])
  @@map("affiliates")
}

model AffiliateCommission {
  id          String           @id @default(cuid())
  affiliateId String
  affiliate   Affiliate        @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  orderId     String
  order       Order            @relation(fields: [orderId], references: [id])
  saleAmount  Decimal
  commission  Decimal
  status      CommissionStatus @default(PENDING)
  paidAt      DateTime?
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("affiliate_commissions")
}

model Referral {
  id             String         @id @default(cuid())
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  referrerId     String
  referrer       Customer       @relation("Referrer", fields: [referrerId], references: [id])
  referredId     String?
  referred       Customer?      @relation("Referred", fields: [referredId], references: [id])
  affiliateId    String?
  affiliate      Affiliate?     @relation(fields: [affiliateId], references: [id])
  code           String         @unique
  status         ReferralStatus @default(PENDING)
  rewardType     String?
  rewardValue    Decimal?
  rewardedAt     DateTime?
  completedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("referrals")
}

// ============================================================================
// ENUMS FOR NEW MODELS
// ============================================================================

enum SupplierStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum PurchaseOrderStatus {
  DRAFT
  SUBMITTED
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  RECEIVED
  REFUNDED
  COMPLETED
  CANCELLED
}

enum RefundMethod {
  ORIGINAL_PAYMENT
  STORE_CREDIT
  GIFT_CARD
  BANK_TRANSFER
}

enum GiftCardStatus {
  ACTIVE
  REDEEMED
  EXPIRED
  CANCELLED
}

enum GiftCardTransactionType {
  PURCHASE
  REDEMPTION
  REFUND
  ADJUSTMENT
  EXPIRY
}

enum AffiliateStatus {
  PENDING
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum ReferralStatus {
  PENDING
  COMPLETED
  REWARDED
  EXPIRED
  CANCELLED
}
