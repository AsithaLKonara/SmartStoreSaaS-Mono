name: Cursor Policy Enforcement

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop

jobs:
  policy-check:
    name: Enforce Cursor AI Rules
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for diff analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: 🚨 Check for removed exceptions
        run: |
          echo "Checking for removed throw statements..."
          if git diff origin/main...HEAD | grep -E '^\-.*throw' | grep -v '^\-\s*//' > removed_throws.txt; then
            echo "❌ VIOLATION: throw statements were removed"
            echo "Removed throws:"
            cat removed_throws.txt
            exit 1
          else
            echo "✅ No throw statements removed"
          fi

      - name: 🚨 Check for silent catch blocks
        run: |
          echo "Scanning for empty catch blocks..."
          if git diff origin/main...HEAD -- '*.ts' '*.tsx' | grep -A 2 'catch.*{' | grep -E '^\+.*catch.*{\s*}' > empty_catches.txt; then
            echo "❌ VIOLATION: Empty catch blocks detected"
            cat empty_catches.txt
            exit 1
          else
            echo "✅ No empty catch blocks detected"
          fi

      - name: 🚨 Check for console statements
        run: |
          echo "Checking for console.log/error/warn..."
          npm run lint 2>&1 | tee lint-output.txt || true
          if grep -i "console\." lint-output.txt; then
            echo "❌ VIOLATION: Console statements found"
            exit 1
          else
            echo "✅ No console statements found"
          fi

      - name: 🚨 Check for ad-hoc authorization
        run: |
          echo "Scanning for inline role checks..."
          if git diff origin/main...HEAD -- '*.ts' '*.tsx' | grep -E '^\+.*(user\.role\s*===|role\s*===\s*["\']|req\.user\.role)' > adhoc_auth.txt; then
            echo "⚠️ WARNING: Potential ad-hoc authorization detected"
            echo "Please verify these use centralized auth:"
            cat adhoc_auth.txt
            # Warning only, not failing build
          else
            echo "✅ No ad-hoc authorization detected"
          fi

      - name: 🚨 Check for success on error
        run: |
          echo "Checking for 'success: true' in catch blocks..."
          FILES_CHANGED=$(git diff --name-only origin/main...HEAD -- '*.ts' '*.tsx')
          for file in $FILES_CHANGED; do
            if [ -f "$file" ]; then
              # Check if file has catch blocks that return success: true
              if grep -Pzo '(?s)catch.*?\{[^}]*success:\s*true' "$file" > /dev/null; then
                echo "❌ VIOLATION: $file returns success: true in catch block"
                exit 1
              fi
            fi
          done
          echo "✅ No success-on-error violations"

      - name: Setup test database
        run: |
          echo "Setting up test database..."
          npm run db:test:setup || true
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: Seed test users
        run: |
          echo "Seeding test users for RBAC audit..."
          npm run db:seed:test-users
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: 🔐 Run RBAC audit
        run: |
          echo "Running RBAC audit..."
          npm run audit:rbac || exit 1
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          BASE_URL: http://localhost:3000

      - name: 📊 Upload RBAC audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rbac-audit-report
          path: rbac-audit-report.json

      - name: 🧪 Run tests
        run: |
          echo "Running test suite..."
          npm run test:ci
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: 📈 Check test coverage
        run: |
          echo "Checking test coverage..."
          npm run test:coverage -- --coverageThreshold='{"global":{"branches":70,"functions":70,"lines":75,"statements":75}}'

      - name: ✅ Policy check passed
        if: success()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ All Cursor AI policy checks passed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: ❌ Policy check failed
        if: failure()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ Cursor AI policy violations detected!"
          echo ""
          echo "Please review the failures above and fix:"
          echo "1. Removed exceptions must be restored"
          echo "2. Empty catch blocks must be filled"
          echo "3. Console statements must use logger"
          echo "4. Ad-hoc auth must use centralized middleware"
          echo "5. RBAC audit must pass"
          echo ""
          echo "See .cursorrules for details"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1

  label-check:
    name: Verify Cursor Auto-Fix Label
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Check if PR is cursor auto-fix
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            const labels = pr.labels.map(l => l.name);
            
            // If branch starts with cursor/auto-fix, ensure proper label
            if (branchName.startsWith('cursor/auto-fix')) {
              if (!labels.includes('cursor/auto-fix')) {
                core.setFailed('Cursor auto-fix branch must have "cursor/auto-fix" label');
              }
              
              // Check for required PR description sections
              const body = pr.body || '';
              const requiredSections = [
                'What was changed',
                'Why this change was made',
                'Testing'
              ];
              
              for (const section of requiredSections) {
                if (!body.includes(section)) {
                  core.setFailed(`PR description missing required section: "${section}"`);
                }
              }
              
              console.log('✅ Cursor auto-fix PR properly labeled and documented');
            }

